-- ðŸ¤– Summon Experts Agent System Database Schema
-- Run this in your Supabase SQL Editor

-- Enable necessary extensions
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- ========================================
-- CORE TABLES
-- ========================================

-- Organizations (multi-tenant support)
CREATE TABLE organizations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    name TEXT NOT NULL,
    slug TEXT UNIQUE NOT NULL,
    industry TEXT,
    geo TEXT,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Users
CREATE TABLE users (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    email TEXT UNIQUE NOT NULL,
    full_name TEXT,
    avatar_url TEXT,
    org_id UUID REFERENCES organizations(id) ON DELETE CASCADE,
    role TEXT DEFAULT 'member' CHECK (role IN ('owner', 'admin', 'member')),
    preferences JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Projects (main container for agent workflows)
CREATE TABLE projects (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    goal TEXT NOT NULL,
    constraints TEXT[],
    target_date DATE,
    context JSONB DEFAULT '{}',
    status TEXT DEFAULT 'active' CHECK (status IN ('active', 'paused', 'completed', 'cancelled')),
    created_by UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Milestones (major project phases)
CREATE TABLE milestones (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    title TEXT NOT NULL,
    description TEXT,
    due_date DATE,
    order_index INTEGER NOT NULL,
    status TEXT DEFAULT 'not_started' CHECK (status IN ('not_started', 'in_progress', 'completed')),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Tasks (individual work items)
CREATE TABLE tasks (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    milestone_id UUID REFERENCES milestones(id) ON DELETE SET NULL,
    title TEXT NOT NULL,
    details TEXT,
    owner_agent_key TEXT CHECK (owner_agent_key IN ('planner', 'tracker', 'guide', 'marketing', 'finance', 'dev', 'ops')),
    priority INTEGER DEFAULT 3 CHECK (priority IN (1, 2, 3)), -- 1=high, 2=medium, 3=low
    status TEXT DEFAULT 'not_started' CHECK (status IN ('not_started', 'in_progress', 'blocked', 'done')),
    due_at TIMESTAMP WITH TIME ZONE,
    estimated_hours INTEGER,
    actual_hours INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- AGENT EXECUTION TABLES
-- ========================================

-- Agent runs (tracking all agent executions)
CREATE TABLE agent_runs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    task_id UUID REFERENCES tasks(id) ON DELETE SET NULL,
    agent_key TEXT NOT NULL CHECK (agent_key IN ('planner', 'tracker', 'guide', 'marketing', 'finance', 'dev', 'ops')),
    status TEXT DEFAULT 'queued' CHECK (status IN ('queued', 'running', 'completed', 'failed')),
    input JSONB NOT NULL,
    output JSONB,
    error TEXT,
    started_at TIMESTAMP WITH TIME ZONE,
    completed_at TIMESTAMP WITH TIME ZONE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Task events (audit trail for task changes)
CREATE TABLE task_events (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    task_id UUID NOT NULL REFERENCES tasks(id) ON DELETE CASCADE,
    type TEXT NOT NULL CHECK (type IN ('created', 'started', 'blocked', 'unblocked', 'completed', 'comment', 'nudge_sent', 'status_changed')),
    payload JSONB DEFAULT '{}',
    created_by UUID REFERENCES users(id),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- OUTPUT & DELIVERABLES
-- ========================================

-- Outputs (files, documents, data generated by agents)
CREATE TABLE outputs (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    task_id UUID REFERENCES tasks(id) ON DELETE SET NULL,
    kind TEXT NOT NULL CHECK (kind IN ('doc', 'csv', 'json', 'link')),
    url TEXT,
    summary TEXT NOT NULL,
    metadata JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- INTEGRATIONS
-- ========================================

-- External integrations (API keys, webhooks, etc.)
CREATE TABLE integrations (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    org_id UUID NOT NULL REFERENCES organizations(id) ON DELETE CASCADE,
    provider TEXT NOT NULL CHECK (provider IN ('notion', 'slack', 'email', 'calendar', 'crm')),
    name TEXT NOT NULL,
    config JSONB NOT NULL,
    is_active BOOLEAN DEFAULT true,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- NOTIFICATIONS & COMMUNICATIONS
-- ========================================

-- Notifications (in-app messages, emails, etc.)
CREATE TABLE notifications (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(id) ON DELETE CASCADE,
    project_id UUID REFERENCES projects(id) ON DELETE CASCADE,
    task_id UUID REFERENCES tasks(id) ON DELETE SET NULL,
    type TEXT NOT NULL CHECK (type IN ('info', 'warning', 'success', 'error')),
    title TEXT NOT NULL,
    message TEXT NOT NULL,
    channel TEXT DEFAULT 'in_app' CHECK (channel IN ('in_app', 'email', 'slack')),
    is_read BOOLEAN DEFAULT false,
    sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- ANALYTICS & METRICS
-- ========================================

-- Project metrics (KPIs, progress tracking)
CREATE TABLE project_metrics (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    metric_name TEXT NOT NULL,
    metric_value NUMERIC,
    metric_unit TEXT,
    target_value NUMERIC,
    recorded_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Coaching sessions (Guide Agent interactions)
CREATE TABLE coaching_sessions (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    project_id UUID NOT NULL REFERENCES projects(id) ON DELETE CASCADE,
    nudges_sent INTEGER DEFAULT 0,
    adjustments_proposed INTEGER DEFAULT 0,
    insights_generated INTEGER DEFAULT 0,
    issues_addressed INTEGER DEFAULT 0,
    session_data JSONB DEFAULT '{}',
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- ========================================
-- INDEXES FOR PERFORMANCE
-- ========================================

-- Projects
CREATE INDEX idx_projects_org_id ON projects(org_id);
CREATE INDEX idx_projects_status ON projects(status);
CREATE INDEX idx_projects_target_date ON projects(target_date);

-- Tasks
CREATE INDEX idx_tasks_project_id ON tasks(project_id);
CREATE INDEX idx_tasks_milestone_id ON tasks(milestone_id);
CREATE INDEX idx_tasks_status ON tasks(status);
CREATE INDEX idx_tasks_due_at ON tasks(due_at);
CREATE INDEX idx_tasks_owner_agent ON tasks(owner_agent_key);

-- Agent runs
CREATE INDEX idx_agent_runs_project_id ON agent_runs(project_id);
CREATE INDEX idx_agent_runs_agent_key ON agent_runs(agent_key);
CREATE INDEX idx_agent_runs_status ON agent_runs(status);

-- Task events
CREATE INDEX idx_task_events_task_id ON task_events(task_id);
CREATE INDEX idx_task_events_type ON task_events(type);
CREATE INDEX idx_task_events_created_at ON task_events(created_at);

-- Outputs
CREATE INDEX idx_outputs_project_id ON outputs(project_id);
CREATE INDEX idx_outputs_task_id ON outputs(task_id);
CREATE INDEX idx_outputs_kind ON outputs(kind);

-- Notifications
CREATE INDEX idx_notifications_user_id ON notifications(user_id);
CREATE INDEX idx_notifications_project_id ON notifications(project_id);
CREATE INDEX idx_notifications_is_read ON notifications(is_read);

-- ========================================
-- ROW LEVEL SECURITY (RLS) POLICIES
-- ========================================

-- Enable RLS on all tables
ALTER TABLE organizations ENABLE ROW LEVEL SECURITY;
ALTER TABLE users ENABLE ROW LEVEL SECURITY;
ALTER TABLE projects ENABLE ROW LEVEL SECURITY;
ALTER TABLE milestones ENABLE ROW LEVEL SECURITY;
ALTER TABLE tasks ENABLE ROW LEVEL SECURITY;
ALTER TABLE agent_runs ENABLE ROW LEVEL SECURITY;
ALTER TABLE task_events ENABLE ROW LEVEL SECURITY;
ALTER TABLE outputs ENABLE ROW LEVEL SECURITY;
ALTER TABLE integrations ENABLE ROW LEVEL SECURITY;
ALTER TABLE notifications ENABLE ROW LEVEL SECURITY;
ALTER TABLE project_metrics ENABLE ROW LEVEL SECURITY;
ALTER TABLE coaching_sessions ENABLE ROW LEVEL SECURITY;

-- Organizations: Users can only see their own org
CREATE POLICY "Users can view own organization" ON organizations
    FOR SELECT USING (id IN (
        SELECT org_id FROM users WHERE id = auth.uid()
    ));

-- Users: Users can only see users in their org
CREATE POLICY "Users can view org members" ON users
    FOR SELECT USING (org_id IN (
        SELECT org_id FROM users WHERE id = auth.uid()
    ));

-- Projects: Users can only see projects in their org
CREATE POLICY "Users can view org projects" ON projects
    FOR SELECT USING (org_id IN (
        SELECT org_id FROM users WHERE id = auth.uid()
    ));

CREATE POLICY "Users can insert org projects" ON projects
    FOR INSERT WITH CHECK (org_id IN (
        SELECT org_id FROM users WHERE id = auth.uid()
    ));

CREATE POLICY "Users can update org projects" ON projects
    FOR UPDATE USING (org_id IN (
        SELECT org_id FROM users WHERE id = auth.uid()
    ));

-- Milestones: Users can only see milestones for projects in their org
CREATE POLICY "Users can view org milestones" ON milestones
    FOR SELECT USING (project_id IN (
        SELECT id FROM projects WHERE org_id IN (
            SELECT org_id FROM users WHERE id = auth.uid()
        )
    ));

-- Tasks: Users can only see tasks for projects in their org
CREATE POLICY "Users can view org tasks" ON tasks
    FOR SELECT USING (project_id IN (
        SELECT id FROM projects WHERE org_id IN (
            SELECT org_id FROM users WHERE id = auth.uid()
        )
    ));

-- Agent runs: Users can only see agent runs for projects in their org
CREATE POLICY "Users can view org agent runs" ON agent_runs
    FOR SELECT USING (project_id IN (
        SELECT id FROM projects WHERE org_id IN (
            SELECT org_id FROM users WHERE id = auth.uid()
        )
    ));

-- Task events: Users can only see task events for tasks in their org
CREATE POLICY "Users can view org task events" ON task_events
    FOR SELECT USING (task_id IN (
        SELECT id FROM tasks WHERE project_id IN (
            SELECT id FROM projects WHERE org_id IN (
                SELECT org_id FROM users WHERE id = auth.uid()
            )
        )
    ));

-- Outputs: Users can only see outputs for projects in their org
CREATE POLICY "Users can view org outputs" ON outputs
    FOR SELECT USING (project_id IN (
        SELECT id FROM projects WHERE org_id IN (
            SELECT org_id FROM users WHERE id = auth.uid()
        )
    ));

-- Integrations: Users can only see integrations for their org
CREATE POLICY "Users can view org integrations" ON integrations
    FOR SELECT USING (org_id IN (
        SELECT org_id FROM users WHERE id = auth.uid()
    ));

-- Notifications: Users can only see their own notifications
CREATE POLICY "Users can view own notifications" ON notifications
    FOR SELECT USING (user_id = auth.uid());

-- Project metrics: Users can only see metrics for projects in their org
CREATE POLICY "Users can view org project metrics" ON project_metrics
    FOR SELECT USING (project_id IN (
        SELECT id FROM projects WHERE org_id IN (
            SELECT org_id FROM users WHERE id = auth.uid()
        )
    ));

-- Coaching sessions: Users can only see coaching sessions for projects in their org
CREATE POLICY "Users can view org coaching sessions" ON coaching_sessions
    FOR SELECT USING (project_id IN (
        SELECT id FROM projects WHERE org_id IN (
            SELECT org_id FROM users WHERE id = auth.uid()
        )
    ));

-- ========================================
-- FUNCTIONS & TRIGGERS
-- ========================================

-- Function to update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$ language 'plpgsql';

-- Triggers for updated_at
CREATE TRIGGER update_organizations_updated_at BEFORE UPDATE ON organizations
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_projects_updated_at BEFORE UPDATE ON projects
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_milestones_updated_at BEFORE UPDATE ON milestones
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_tasks_updated_at BEFORE UPDATE ON tasks
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_integrations_updated_at BEFORE UPDATE ON integrations
    FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Function to automatically create audit log entry
CREATE OR REPLACE FUNCTION log_task_event()
RETURNS TRIGGER AS $$
BEGIN
    IF TG_OP = 'INSERT' THEN
        INSERT INTO task_events (task_id, type, payload)
        VALUES (NEW.id, 'created', jsonb_build_object('status', NEW.status));
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        IF OLD.status != NEW.status THEN
            INSERT INTO task_events (task_id, type, payload)
            VALUES (NEW.id, 'status_changed', jsonb_build_object(
                'old_status', OLD.status,
                'new_status', NEW.status
            ));
        END IF;
        RETURN NEW;
    END IF;
    RETURN NULL;
END;
$$ language 'plpgsql';

-- Trigger for automatic task event logging
CREATE TRIGGER log_task_changes
    AFTER INSERT OR UPDATE ON tasks
    FOR EACH ROW EXECUTE FUNCTION log_task_event();

-- ========================================
-- SAMPLE DATA (Optional)
-- ========================================

-- Insert a sample organization
INSERT INTO organizations (name, slug, industry, geo) VALUES
('Demo Company', 'demo-company', 'technology', 'San Francisco');

-- Insert a sample user
INSERT INTO users (email, full_name, org_id, role) VALUES
('demo@example.com', 'Demo User', (SELECT id FROM organizations WHERE slug = 'demo-company'), 'owner');

-- Insert a sample project
INSERT INTO projects (org_id, title, description, goal, constraints, target_date, context, created_by) VALUES
(
    (SELECT id FROM organizations WHERE slug = 'demo-company'),
    'Launch MVP in 90 Days',
    'Build and launch our minimum viable product',
    'Launch a working MVP that generates our first 10 customers',
    ARRAY['budget <= $10k', 'team size <= 3 people'],
    '2025-12-01',
    '{"industry": "technology", "geo": "San Francisco", "team_experience": "intermediate"}',
    (SELECT id FROM users WHERE email = 'demo@example.com')
);

-- ========================================
-- VIEWS FOR COMMON QUERIES
-- ========================================

-- Project summary view
CREATE VIEW project_summary AS
SELECT 
    p.id,
    p.title,
    p.goal,
    p.status,
    p.target_date,
    COUNT(DISTINCT m.id) as milestone_count,
    COUNT(DISTINCT t.id) as task_count,
    COUNT(DISTINCT CASE WHEN t.status = 'done' THEN t.id END) as completed_tasks,
    COUNT(DISTINCT CASE WHEN t.status = 'in_progress' THEN t.id END) as active_tasks,
    COUNT(DISTINCT CASE WHEN t.status = 'blocked' THEN t.id END) as blocked_tasks,
    ROUND(
        (COUNT(DISTINCT CASE WHEN t.status = 'done' THEN t.id END)::float / 
         NULLIF(COUNT(DISTINCT t.id), 0) * 100), 1
    ) as completion_percentage
FROM projects p
LEFT JOIN milestones m ON p.id = m.project_id
LEFT JOIN tasks t ON p.id = t.project_id
GROUP BY p.id, p.title, p.goal, p.status, p.target_date;

-- Task dashboard view
CREATE VIEW task_dashboard AS
SELECT 
    t.id,
    t.title,
    t.status,
    t.priority,
    t.due_at,
    p.title as project_title,
    m.title as milestone_title,
    t.owner_agent_key,
    COUNT(te.id) as event_count,
    MAX(te.created_at) as last_activity
FROM tasks t
JOIN projects p ON t.project_id = p.id
LEFT JOIN milestones m ON t.milestone_id = m.id
LEFT JOIN task_events te ON t.id = te.task_id
GROUP BY t.id, t.title, t.status, t.priority, t.due_at, p.title, m.title, t.owner_agent_key;

-- Agent performance view
CREATE VIEW agent_performance AS
SELECT 
    ar.agent_key,
    COUNT(*) as total_runs,
    COUNT(CASE WHEN ar.status = 'completed' THEN 1 END) as successful_runs,
    COUNT(CASE WHEN ar.status = 'failed' THEN 1 END) as failed_runs,
    ROUND(
        (COUNT(CASE WHEN ar.status = 'completed' THEN 1 END)::float / 
         NULLIF(COUNT(*), 0) * 100), 1
    ) as success_rate,
    AVG(EXTRACT(EPOCH FROM (ar.completed_at - ar.started_at))) as avg_duration_seconds
FROM agent_runs ar
GROUP BY ar.agent_key;

-- ========================================
-- GRANTS & PERMISSIONS
-- ========================================

-- Grant necessary permissions to authenticated users
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO authenticated;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO authenticated;

-- Grant permissions to service role (for agent operations)
GRANT ALL ON ALL TABLES IN SCHEMA public TO service_role;
GRANT ALL ON ALL SEQUENCES IN SCHEMA public TO service_role;

-- ========================================
-- FINAL NOTES
-- ========================================

/*
ðŸŽ‰ Database schema created successfully!

Next steps:
1. Set up your Supabase project
2. Copy this schema to your SQL editor
3. Run the schema
4. Update your environment variables
5. Test the agent system!

The schema includes:
âœ… Multi-tenant organization structure
âœ… Complete agent workflow tables
âœ… Row-level security policies
âœ… Performance indexes
âœ… Audit logging
âœ… Sample data
âœ… Useful views
âœ… Proper permissions

Your AI agents are now ready to store and manage data! ðŸš€
*/
